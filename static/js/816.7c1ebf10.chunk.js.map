{"version":3,"file":"static/js/816.7c1ebf10.chunk.js","mappings":"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","sources":["components/Contact-form/ContactForm.styled.jsx","services/validate-schema.js","components/FormItem/FormItem.styled.jsx","components/FormItem/FormItem.jsx","services/tocapitalize.js","services/fireBase.js","components/Contact-form/ContactForm.jsx","Pages/New.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { LinkStyled } from 'components/App.styled';\nimport { Form } from 'formik';\n\nexport const FormikForm = styled(Form)`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    max-width: 400px;\n    padding-bottom: 30px;\n`;\n\nexport const BtnClose = styled(LinkStyled)`\n    position: absolute;\n    top: 0px;\n    left: 0;\n`;\n\nexport const AddPhoto = styled.input`\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n    border: 0;\n    padding: 0;\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    margin: -1px;\n`;\n\nexport const PhotoLabel = styled.label`\n    position: relative;\n    display: block;\n    width: 150px;\n    margin: 0 auto;\n    aspect-ratio: 1;\n    border-radius: 50%;\n    background-color: #302b2b;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    background-image: url('${props => props.file}');\n    cursor: pointer;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n\nexport const IconEdit = styled.div`\n    position: absolute;\n    bottom: -3px;\n    right: -3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: ${props => props.theme.colors.mainBackground};\n    transition: color 250ms;\n`;\n\nexport const SubmitButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    height: 40px;\n    border-radius: 4px;\n    font-size: 18px;\n    background-color: ${props => props.theme.colors.btn};\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n","import * as yup from 'yup';\n\nexport const validationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .matches(\n            /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/,\n            {\n                message:\n                    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n                test: value => {\n                    return /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .nullable(true)\n        .transform((value, startValue) =>\n            startValue.trim() === '' ? null : value\n        )\n        .required(\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        ),\n\n    surname: yup\n        .string()\n        .matches(\n            /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/,\n            {\n                message:\n                    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n                test: value => {\n                    return /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .nullable(true)\n        .transform((value, startValue) =>\n            startValue.trim() === '' ? null : value\n        ),\n\n    number: yup\n        .string()\n        .matches(\n            /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n            {\n                message:\n                    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n                test: value => {\n                    return /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .required(\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        ),\n    email: yup.string().matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, {\n        message: 'Invalid email address',\n        test: value => {\n            return /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value);\n        },\n    }),\n});\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: ${props => props.theme.fontSizes.medium};\n    transition: color 250ms;\n    & svg {\n        transition: fill 250ms;\n    }\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n    &:hover svg,\n    &:focus svg {\n        fill: ${props => props.theme.colors.hover};\n    }\n\n    &:nth-of-type(5) {\n        margin-bottom: 20px;\n    }\n`;\n\nexport const InputWrapper = styled.div`\n    position: relative;\n    display: flex;\n`;\n\nexport const Ico = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #404040;\n    width: 33px;\n    height: 33px;\n    padding: 5px;\n`;\n\nexport const Input = styled(Field)`\n    flex-grow: 1;\n    display: block;\n    margin: 0;\n    padding: 5px 33px 5px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    font-size: 18px;\n`;\n\nexport const Message = styled.span`\n    font-size: ${props => props.theme.fontSizes.small};\n`;\n","import { Svg } from 'components/icon/Icon';\nimport { Ico, Input, InputWrapper, Label, Message } from './FormItem.styled';\nimport { ErrorMessage } from 'formik';\nimport sprite from '../../img/icons.svg';\nimport { toCapitalize } from 'services/tocapitalize';\n\nexport const FormItem = ({ name, type, onChange, use }) => {\n    let normalName = name;\n    if (name === 'email') normalName = 'e-mail';\n    const ph = `Enter ${normalName}`;\n    return (\n        <Label>\n            {toCapitalize(normalName)}\n            <InputWrapper>\n                <Ico>\n                    <Svg w={23} h={23} use={`${sprite}#icon-${use}`} />\n                </Ico>\n                <Input\n                    type={type}\n                    name={name}\n                    placeholder={ph}\n                    onChange={onChange}\n                />\n            </InputWrapper>\n            <ErrorMessage name={name}>\n                {msg => <Message>{msg}</Message>}\n            </ErrorMessage>\n        </Label>\n    );\n};\n","export const toCapitalize = str => {\n    const firstLetter = str.charAt(0).toUpperCase();\n    const remainingLetters = str.slice(1);\n    const capitalized = firstLetter + remainingLetters;\n    return capitalized;\n};\n","import { initializeApp } from 'firebase/app';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyCKXdZk6YD8rC64yq8pJuv_PrJUlFj-tIk',\n    authDomain: 'uploadimg-4d2bd.firebaseapp.com',\n    projectId: 'uploadimg-4d2bd',\n    storageBucket: 'uploadimg-4d2bd.appspot.com',\n    messagingSenderId: '484124534248',\n    appId: '1:484124534248:web:ae150a2752a6afe3a7b05d',\n};\n\nconst fbApp = initializeApp(firebaseConfig);\nexport const fbStorage = getStorage(fbApp);\n","import {\n    FormikForm,\n    SubmitButton,\n    AddPhoto,\n    PhotoLabel,\n    BtnClose,\n    IconEdit,\n} from './ContactForm.styled';\nimport { Formik } from 'formik';\nimport { validationSchema } from 'services/validate-schema';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { selectContacts } from 'store/selector';\nimport sprite from '../../img/icons.svg';\nimport { Svg } from 'components/icon/Icon';\nimport { useRef, useState } from 'react';\nimport defaultPhoto from '../../img/avatar-default.png';\nimport { FormItem } from 'components/FormItem/FormItem';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { fbStorage } from '../../services/fireBase';\nimport { getDownloadURL, ref, uploadBytes } from 'firebase/storage';\nimport { normalizeValues } from 'services/normalize';\nimport { hendleAddContact } from 'store/contacts/contactsOperations';\n\nexport const ContactForm = ({ contact, title, onSetState }) => {\n    const contacts = useSelector(selectContacts);\n    const navigate = useNavigate();\n    const contactId = useParams().contactId ?? '';\n    const [uploadImg, setUploadImg] = useState('');\n\n    const [contactImg, setContactImg] = useState(defaultPhoto);\n\n    const dispatch = useDispatch();\n\n    const hendleSetState = values => {\n        const val = normalizeValues(values);\n        dispatch(hendleAddContact(val));\n    };\n\n    const addImg = useRef();\n\n    const hendleUploadImg = photo => {\n        const imgRef = ref(fbStorage, `images/${photo.name}`);\n        uploadBytes(imgRef, photo).then(res => {\n            getDownloadURL(ref(fbStorage, res.metadata.fullPath)).then(url => {\n                setUploadImg(url);\n            });\n        });\n    };\n\n    const hendleFileChange = e => {\n        const photo = e.target.files[0];\n        const reader = new FileReader();\n        reader.readAsDataURL(photo);\n        reader.onload = () => setContactImg(reader.result);\n        hendleUploadImg(photo);\n    };\n\n    const location = useLocation();\n    const goBackLink = location?.state?.from || '/';\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            initialValues={{\n                name: '',\n                surname: '',\n                number: '',\n                email: '',\n                img: '',\n            }}\n            onSubmit={(values, { resetForm }) => {\n                const isNameExist = contacts.find(\n                    val =>\n                        val.name.toLowerCase() === values.name.toLowerCase() &&\n                        val.surname.toLowerCase() ===\n                            values.surname.toLowerCase() &&\n                        val.id !== contactId\n                );\n                const isNumberExist = contacts.find(\n                    val => val.number === values.number && val.id !== contactId\n                );\n                if (isNameExist) {\n                    toast(`${values.name} is already in contacts.`);\n                    return;\n                }\n                if (isNumberExist) {\n                    toast(\n                        `${values.number} is already in contacts as ${isNumberExist.name}.`\n                    );\n                    return;\n                }\n                values.img = uploadImg;\n                hendleSetState(values);\n                resetForm();\n                navigate('/');\n            }}\n        >\n            {({ handleSubmit, handleChange }) => {\n                return (\n                    <>\n                        <FormikForm onSubmit={handleSubmit}>\n                            <BtnClose to={goBackLink}>\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-close`}\n                                />\n                            </BtnClose>\n                            <AddPhoto\n                                ref={addImg}\n                                id=\"img\"\n                                name=\"img\"\n                                type=\"file\"\n                                accept=\"image/jpeg\"\n                                onChange={hendleFileChange}\n                            />\n                            <PhotoLabel htmlFor={'img'} file={contactImg}>\n                                <IconEdit>\n                                    <Svg\n                                        w={20}\n                                        h={20}\n                                        use={`${sprite}#icon-pencil`}\n                                    />\n                                </IconEdit>\n                            </PhotoLabel>\n                            <FormItem\n                                type=\"text\"\n                                name=\"name\"\n                                use=\"contact\"\n                                onChange={handleChange}\n                            />\n                            <FormItem\n                                type=\"text\"\n                                name=\"surname\"\n                                use=\"contact\"\n                                onChange={handleChange}\n                            />\n                            <FormItem\n                                type=\"tel\"\n                                name=\"number\"\n                                use=\"phone\"\n                                onChange={handleChange}\n                            />\n                            <FormItem\n                                type=\"email\"\n                                name=\"email\"\n                                use=\"email\"\n                                onChange={handleChange}\n                            />\n                            <SubmitButton type=\"submit\">\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-save-contact`}\n                                />\n                                Add contact\n                            </SubmitButton>\n                        </FormikForm>\n                    </>\n                );\n            }}\n        </Formik>\n    );\n};\n","import { Container, Section } from 'components/App.styled';\nimport { ContactForm } from 'components/Contact-form/ContactForm';\n\nconst New = () => {\n    return (\n        <Section>\n            <Container>\n                <ContactForm />\n            </Container>\n        </Section>\n    );\n};\n\nexport default New;\n"],"names":["FormikForm","styled","Form","BtnClose","LinkStyled","AddPhoto","PhotoLabel","props","file","theme","colors","hover","IconEdit","mainBackground","SubmitButton","btn","validationSchema","yup","shape","name","matches","message","test","value","nullable","transform","startValue","trim","required","surname","number","email","Label","fontSizes","medium","InputWrapper","Ico","Input","Field","Message","small","FormItem","type","onChange","use","normalName","str","ph","charAt","toUpperCase","slice","w","h","sprite","placeholder","msg","fbApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","fbStorage","getStorage","ContactForm","contact","title","onSetState","contacts","useSelector","selectContacts","navigate","useNavigate","contactId","useParams","useState","uploadImg","setUploadImg","defaultPhoto","contactImg","setContactImg","dispatch","useDispatch","addImg","useRef","hendleFileChange","e","photo","target","files","reader","FileReader","readAsDataURL","onload","result","imgRef","ref","uploadBytes","then","res","getDownloadURL","metadata","fullPath","url","hendleUploadImg","location","useLocation","goBackLink","state","from","initialValues","img","onSubmit","values","resetForm","isNameExist","find","val","toLowerCase","id","isNumberExist","toast","normalizeValues","hendleAddContact","hendleSetState","handleSubmit","handleChange","to","accept","htmlFor"],"sourceRoot":""}