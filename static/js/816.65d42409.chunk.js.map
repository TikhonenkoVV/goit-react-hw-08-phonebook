{"version":3,"file":"static/js/816.65d42409.chunk.js","mappings":"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","sources":["components/Contact-form/ContactForm.styled.jsx","services/validate-schema.js","components/FormItem/FormItem.styled.jsx","components/FormItem/FormItem.jsx","services/tocapitalize.js","services/fireBase.js","components/Contact-form/ContactForm.jsx","Pages/New.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form } from 'formik';\nimport { Link } from 'react-router-dom';\n\nexport const FormikForm = styled(Form)`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    max-width: 400px;\n    padding-bottom: 30px;\n`;\n\nexport const BtnClose = styled(Link)`\n    display: block;\n    position: absolute;\n    top: 0px;\n    left: 0;\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n\nexport const AddPhoto = styled.input`\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n    border: 0;\n    padding: 0;\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    margin: -1px;\n`;\n\nexport const PhotoLabel = styled.label`\n    display: block;\n    width: 150px;\n    margin: 0 auto;\n    aspect-ratio: 1;\n    border-radius: 50%;\n    background-color: #302b2b;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-image: url(${props => props.file});\n`;\n\nexport const SubmitButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    height: 40px;\n    border-radius: 4px;\n    font-size: 18px;\n    background-color: ${props => props.theme.colors.btn};\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n","import * as yup from 'yup';\n\nexport const validationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .matches(\n            /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/,\n            {\n                message:\n                    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n                test: value => {\n                    return /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .nullable(true)\n        .transform((value, startValue) =>\n            startValue.trim() === '' ? null : value\n        )\n        .required(\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        ),\n\n    surname: yup\n        .string()\n        .matches(\n            /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/,\n            {\n                message:\n                    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n                test: value => {\n                    return /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .nullable(true)\n        .transform((value, startValue) =>\n            startValue.trim() === '' ? null : value\n        ),\n\n    number: yup\n        .string()\n        .matches(\n            /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n            {\n                message:\n                    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n                test: value => {\n                    return /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .required(\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        ),\n});\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: ${props => props.theme.fontSizes.medium};\n    transition: color 250ms;\n    & svg {\n        transition: fill 250ms;\n    }\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n    &:hover svg,\n    &:focus svg {\n        fill: ${props => props.theme.colors.hover};\n    }\n\n    &:nth-of-type(5) {\n        margin-bottom: 30px;\n    }\n`;\n\nexport const InputWrapper = styled.div`\n    position: relative;\n    display: flex;\n`;\n\nexport const Ico = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #404040;\n    width: 33px;\n    height: 33px;\n    padding: 5px;\n`;\n\nexport const Input = styled(Field)`\n    flex-grow: 1;\n    display: block;\n    margin: 0;\n    padding: 5px 33px 5px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    font-size: 18px;\n`;\n\nexport const Message = styled.span`\n    font-size: ${props => props.theme.fontSizes.small};\n`;\n","import { Svg } from 'components/icon/Icon';\nimport { Ico, Input, InputWrapper, Label, Message } from './FormItem.styled';\nimport { ErrorMessage } from 'formik';\nimport sprite from '../../img/icons.svg';\nimport { toCapitalize } from 'services/tocapitalize';\n\nexport const FormItem = ({ name, type, onChange, use }) => {\n    let normalName = name;\n    if (name === 'email') normalName = 'e-mail';\n    const ph = `Enter ${normalName}`;\n    return (\n        <Label>\n            {toCapitalize(normalName)}\n            <InputWrapper>\n                <Ico>\n                    <Svg w={23} h={23} use={`${sprite}#icon-${use}`} />\n                </Ico>\n                <Input\n                    type={type}\n                    name={name}\n                    placeholder={ph}\n                    onChange={onChange}\n                />\n            </InputWrapper>\n            <ErrorMessage name={name}>\n                {msg => <Message>{msg}</Message>}\n            </ErrorMessage>\n        </Label>\n    );\n};\n","export const toCapitalize = str => {\n    const firstLetter = str.charAt(0).toUpperCase();\n    const remainingLetters = str.slice(1);\n    const capitalized = firstLetter + remainingLetters;\n    return capitalized;\n};\n","import { initializeApp } from 'firebase/app';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyCKXdZk6YD8rC64yq8pJuv_PrJUlFj-tIk',\n    authDomain: 'uploadimg-4d2bd.firebaseapp.com',\n    projectId: 'uploadimg-4d2bd',\n    storageBucket: 'uploadimg-4d2bd.appspot.com',\n    messagingSenderId: '484124534248',\n    appId: '1:484124534248:web:ae150a2752a6afe3a7b05d',\n};\n\nconst fbApp = initializeApp(firebaseConfig);\nexport const fbStorage = getStorage(fbApp);\n","import {\n    FormikForm,\n    SubmitButton,\n    AddPhoto,\n    PhotoLabel,\n    BtnClose,\n} from './ContactForm.styled';\nimport { Formik } from 'formik';\nimport { validationSchema } from 'services/validate-schema';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { selectContacts, selectCurrentImg } from 'store/selector';\nimport sprite from '../../img/icons.svg';\nimport { Svg } from 'components/icon/Icon';\nimport { useRef, useState } from 'react';\nimport defaultPhoto from '../../img/avatar-default.png';\nimport { FormItem } from 'components/FormItem/FormItem';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { fbStorage } from '../../services/fireBase';\nimport { getDownloadURL, ref, uploadBytes } from 'firebase/storage';\nimport { setCurrentImg } from 'store/contactsSlice';\n\nexport const ContactForm = ({ onSetState }) => {\n    const contacts = useSelector(selectContacts);\n    const currImg = useSelector(selectCurrentImg);\n    const navigate = useNavigate();\n    const currentImg = useDispatch();\n\n    const [contactImg, setContactImg] = useState(defaultPhoto);\n    const addImg = useRef();\n\n    const hendleUploadImg = photo => {\n        const imgRef = ref(fbStorage, `images/${photo.name}`);\n        uploadBytes(imgRef, photo).then(res => {\n            getDownloadURL(ref(fbStorage, res.metadata.fullPath)).then(url => {\n                currentImg(setCurrentImg(url));\n                console.log(url);\n            });\n        });\n    };\n\n    const hendleFileChange = e => {\n        const photo = e.target.files[0];\n        const reader = new FileReader();\n        reader.readAsDataURL(photo);\n        reader.onload = () => setContactImg(reader.result);\n        hendleUploadImg(photo);\n    };\n\n    const location = useLocation();\n    const goBackLink = location?.state?.from || '/';\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            initialValues={{\n                name: '',\n                surname: '',\n                number: '',\n                email: '',\n                img: '',\n            }}\n            onSubmit={(values, { resetForm }) => {\n                const isNameExist = contacts.find(\n                    val =>\n                        val.name.toLowerCase() === values.name.toLowerCase() &&\n                        val.surname.toLowerCase() ===\n                            values.surname.toLowerCase()\n                );\n                const isNumberExist = contacts.find(\n                    val => val.number === values.number\n                );\n                if (isNameExist) {\n                    toast(`${values.name} is already in contacts.`);\n                    return;\n                }\n                if (isNumberExist) {\n                    toast(\n                        `${values.number} is already in contacts as ${isNumberExist.name}.`\n                    );\n                    return;\n                }\n                values.img = currImg;\n                console.log(values);\n                onSetState(values);\n                resetForm();\n                navigate('/');\n            }}\n        >\n            {({ handleSubmit, handleChange }) => {\n                return (\n                    <>\n                        <FormikForm onSubmit={handleSubmit}>\n                            <BtnClose to={goBackLink}>\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-close`}\n                                />\n                            </BtnClose>\n                            <AddPhoto\n                                ref={addImg}\n                                id=\"img\"\n                                name=\"img\"\n                                type=\"file\"\n                                accept=\"image/jpeg\"\n                                onChange={hendleFileChange}\n                            />\n                            <PhotoLabel\n                                htmlFor={'img'}\n                                file={contactImg}\n                            ></PhotoLabel>\n                            <FormItem\n                                type=\"text\"\n                                name=\"name\"\n                                onChange={handleChange}\n                                use=\"contact\"\n                            />\n                            <FormItem\n                                type=\"text\"\n                                name=\"surname\"\n                                onChange={handleChange}\n                                use=\"contact\"\n                            />\n                            <FormItem\n                                type=\"tel\"\n                                name=\"number\"\n                                onChange={handleChange}\n                                use=\"phone\"\n                            />\n                            <FormItem\n                                type=\"email\"\n                                name=\"email\"\n                                onChange={handleChange}\n                                use=\"email\"\n                            />\n                            <SubmitButton type=\"submit\">\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-save-contact`}\n                                />\n                                Add contact\n                            </SubmitButton>\n                        </FormikForm>\n                    </>\n                );\n            }}\n        </Formik>\n    );\n};\n","import { Container, Section } from 'components/App.styled';\nimport { ContactForm } from 'components/Contact-form/ContactForm';\nimport { useDispatch } from 'react-redux';\nimport { hendleAddContact } from 'store/operations';\n\nconst New = () => {\n    const dispatch = useDispatch();\n\n    const hendleSetState = values => {\n        dispatch(hendleAddContact(values));\n    };\n\n    return (\n        <Section>\n            <Container>\n                <ContactForm onSetState={hendleSetState} />\n            </Container>\n        </Section>\n    );\n};\n\nexport default New;\n"],"names":["FormikForm","styled","Form","BtnClose","Link","props","theme","colors","hover","AddPhoto","PhotoLabel","file","SubmitButton","btn","validationSchema","yup","shape","name","matches","message","test","value","nullable","transform","startValue","trim","required","surname","number","Label","fontSizes","medium","InputWrapper","Ico","Input","Field","Message","small","FormItem","type","onChange","use","normalName","str","ph","charAt","toUpperCase","slice","w","h","sprite","placeholder","msg","fbApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","fbStorage","getStorage","ContactForm","onSetState","contacts","useSelector","selectContacts","currImg","selectCurrentImg","navigate","useNavigate","currentImg","useDispatch","useState","defaultPhoto","contactImg","setContactImg","addImg","useRef","hendleFileChange","e","photo","target","files","reader","FileReader","readAsDataURL","onload","result","imgRef","ref","uploadBytes","then","res","getDownloadURL","metadata","fullPath","url","setCurrentImg","console","log","hendleUploadImg","location","useLocation","goBackLink","state","from","initialValues","email","img","onSubmit","values","resetForm","isNameExist","find","val","toLowerCase","isNumberExist","toast","handleSubmit","handleChange","to","id","accept","htmlFor","dispatch","hendleAddContact"],"sourceRoot":""}