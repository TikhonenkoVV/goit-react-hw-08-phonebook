{"version":3,"file":"static/js/685.07924faf.chunk.js","mappings":"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","sources":["components/Contact-form/ContactForm.styled.jsx","services/validate-schema.js","components/FormItem/FormItem.styled.jsx","components/FormItem/FormItem.jsx","services/tocapitalize.js","components/Contact-form/ContactForm.jsx","components/Contact-list/ContactList.styled.jsx","components/Contact-list/ContactList.jsx","Pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { LinkStyled } from 'components/App.styled';\nimport { Form } from 'formik';\n\nexport const FormikForm = styled(Form)`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    max-width: 400px;\n    padding-bottom: 30px;\n`;\n\nexport const BtnClose = styled(LinkStyled)`\n    position: absolute;\n    top: 0px;\n    left: 0;\n`;\n\nexport const PhotoLabel = styled.label`\n    position: relative;\n    display: block;\n    width: 150px;\n    margin: 0 auto;\n    aspect-ratio: 1;\n    border-radius: 50%;\n    background-color: #302b2b;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    background-image: url('${props => props.file}');\n    cursor: pointer;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n\nexport const IconEdit = styled.div`\n    position: absolute;\n    bottom: -3px;\n    right: -3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: ${props => props.theme.colors.mainBackground};\n    transition: color 250ms;\n`;\n\nexport const SubmitButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    height: 40px;\n    border-radius: 4px;\n    font-size: 18px;\n    background-color: ${props => props.theme.colors.btn};\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n","import * as yup from 'yup';\n\nexport const validationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .matches(\n            /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/,\n            {\n                message:\n                    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n                test: value => {\n                    return /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .nullable(true)\n        .transform((value, startValue) =>\n            startValue.trim() === '' ? null : value\n        )\n        .required(\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        ),\n    number: yup\n        .string()\n        .matches(\n            /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n            {\n                message:\n                    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n                test: value => {\n                    return /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .required(\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        ),\n});\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: ${props => props.theme.fontSizes.medium};\n    transition: color 250ms;\n    & svg {\n        transition: fill 250ms;\n    }\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n    &:hover svg,\n    &:focus svg {\n        fill: ${props => props.theme.colors.hover};\n    }\n\n    &:nth-of-type(5) {\n        margin-bottom: 20px;\n    }\n`;\n\nexport const InputWrapper = styled.div`\n    position: relative;\n    display: flex;\n`;\n\nexport const Ico = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #404040;\n    width: 33px;\n    height: 33px;\n    padding: 5px;\n`;\n\nexport const Input = styled(Field)`\n    flex-grow: 1;\n    display: block;\n    margin: 0;\n    padding: 5px 33px 5px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    font-size: 18px;\n`;\n\nexport const Message = styled.span`\n    font-size: ${props => props.theme.fontSizes.small};\n`;\n","import { Svg } from 'components/icon/Icon';\nimport { Ico, Input, InputWrapper, Label, Message } from './FormItem.styled';\nimport { ErrorMessage } from 'formik';\nimport sprite from '../../img/icons.svg';\nimport { toCapitalize } from 'services/tocapitalize';\n\nexport const FormItem = ({ name, type, onChange, use }) => {\n    let normalName = name;\n    if (name === 'email') normalName = 'e-mail';\n    const ph = `Enter ${normalName}`;\n    return (\n        <Label>\n            {toCapitalize(normalName)}\n            <InputWrapper>\n                <Ico>\n                    <Svg w={23} h={23} use={`${sprite}#icon-${use}`} />\n                </Ico>\n                <Input\n                    type={type}\n                    name={name}\n                    placeholder={ph}\n                    onChange={onChange}\n                />\n            </InputWrapper>\n            <ErrorMessage name={name}>\n                {msg => <Message>{msg}</Message>}\n            </ErrorMessage>\n        </Label>\n    );\n};\n","export const toCapitalize = str => {\n    const firstLetter = str.charAt(0).toUpperCase();\n    const remainingLetters = str.slice(1);\n    const capitalized = firstLetter + remainingLetters;\n    return capitalized;\n};\n","import { FormikForm, SubmitButton } from './ContactForm.styled';\nimport { Formik } from 'formik';\nimport { validationSchema } from 'services/validate-schema';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { selectContacts } from 'store/selector';\nimport sprite from '../../img/icons.svg';\nimport { Svg } from 'components/icon/Icon';\nimport { FormItem } from 'components/FormItem/FormItem';\nimport { hendleAddContact } from 'store/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n    const contacts = useSelector(selectContacts);\n\n    const dispatch = useDispatch();\n\n    const hendleSetState = values => {\n        dispatch(hendleAddContact(values));\n    };\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            initialValues={{\n                name: '',\n                number: '',\n            }}\n            onSubmit={(values, { resetForm }) => {\n                const isNameExist = contacts.find(\n                    val => val.name.toLowerCase() === values.name.toLowerCase()\n                );\n                const isNumberExist = contacts.find(\n                    val => val.number === values.number\n                );\n                if (isNameExist) {\n                    toast(`${values.name} is already in contacts.`);\n                    return;\n                }\n                if (isNumberExist) {\n                    toast(\n                        `${values.number} is already in contacts as ${isNumberExist.name}.`\n                    );\n                    return;\n                }\n                hendleSetState(values);\n                resetForm();\n            }}\n        >\n            {({ handleSubmit, handleChange }) => {\n                return (\n                    <>\n                        <FormikForm onSubmit={handleSubmit}>\n                            <FormItem\n                                type=\"text\"\n                                name=\"name\"\n                                use=\"contact\"\n                                onChange={handleChange}\n                            />\n                            <FormItem\n                                type=\"tel\"\n                                name=\"number\"\n                                use=\"phone\"\n                                onChange={handleChange}\n                            />\n                            <SubmitButton type=\"submit\">\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-save-contact`}\n                                />\n                                Add contact\n                            </SubmitButton>\n                        </FormikForm>\n                    </>\n                );\n            }}\n        </Formik>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListHeader = styled.div`\n    padding: 15px 50px 15px 10px;\n    border-bottom: 1px solid grey;\n`;\n\nexport const ContactListHeaderBox = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport const FirstElement = styled.p`\n    padding-left: 40px;\n`;\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 10px;\n    &:nth-of-type(2n) {\n        background-image: linear-gradient(#00000022, #00000022);\n    }\n`;\n\nexport const ContactLink = styled.a`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    width: calc(100% - 30px);\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n\nexport const NameWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    & img {\n        width: 30px;\n        aspect-ratio: 1;\n        object-fit: cover;\n        border-radius: 50%;\n    }\n`;\n\nexport const BtnDel = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    flex-shrink: 0;\n    border-radius: 4px;\n    background-color: ${props => props.theme.colors.btn};\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n","import PropTypes from 'prop-types';\nimport {\n    BtnDel,\n    ContactLink,\n    ContactListHeader,\n    ContactListHeaderBox,\n    FirstElement,\n    Item,\n    List,\n    NameWrapper,\n} from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'store/selector';\nimport avatar from '../../img/avatar-default.png';\nimport sprite from '../../img/icons.svg';\nimport { Svg } from 'components/icon/Icon';\nimport { useEffect } from 'react';\nimport {\n    hendleDeleteContact,\n    hendleFetchContact,\n} from 'store/contacts/contactsOperations';\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const list = useSelector(selectFilteredContacts);\n\n    useEffect(() => {\n        dispatch(hendleFetchContact());\n    }, [dispatch]);\n\n    const delContact = id => dispatch(hendleDeleteContact(id));\n\n    return (\n        <>\n            <ContactListHeader>\n                <ContactListHeaderBox>\n                    <FirstElement>Name</FirstElement>\n                    <p>Phone number</p>\n                </ContactListHeaderBox>\n            </ContactListHeader>\n            <List>\n                {list.map(({ id, name, number }) => {\n                    const telLink = `tel:${number}`;\n                    return (\n                        <Item key={id}>\n                            <ContactLink href={telLink}>\n                                <NameWrapper>\n                                    <img\n                                        src={avatar}\n                                        alt=\"avatar\"\n                                        width={30}\n                                        height={30}\n                                    />\n                                    <p>{name}</p>\n                                </NameWrapper>\n                                <p>{number}</p>\n                            </ContactLink>\n                            <BtnDel\n                                type=\"button\"\n                                onClick={() => delContact(id)}\n                            >\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-del-contact`}\n                                />\n                            </BtnDel>\n                        </Item>\n                    );\n                })}\n            </List>\n        </>\n    );\n};\n\nContactList.propTypes = {\n    list: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        })\n    ),\n};\n","import { Container, Section } from 'components/App.styled';\nimport { ContactForm } from 'components/Contact-form/ContactForm';\nimport { ContactList } from 'components/Contact-list/ContactList';\n\nconst Contacts = () => {\n    return (\n        <>\n            <Section>\n                <Container>\n                    <h1 style={{ textAlign: 'center' }}>Contacts</h1>\n                    <ContactForm />\n                </Container>\n            </Section>\n            <section>\n                <Container>\n                    <ContactList />{' '}\n                </Container>\n            </section>\n        </>\n    );\n};\n\nexport default Contacts;\n"],"names":["FormikForm","styled","Form","SubmitButton","LinkStyled","props","file","theme","colors","hover","mainBackground","btn","validationSchema","yup","shape","name","matches","message","test","value","nullable","transform","startValue","trim","required","number","Label","fontSizes","medium","InputWrapper","Ico","Input","Field","Message","small","FormItem","type","onChange","use","normalName","str","ph","charAt","toUpperCase","slice","w","h","sprite","placeholder","msg","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","initialValues","onSubmit","values","resetForm","isNameExist","find","val","toLowerCase","isNumberExist","toast","hendleAddContact","hendleSetState","handleSubmit","handleChange","ContactListHeader","ContactListHeaderBox","FirstElement","List","Item","ContactLink","NameWrapper","BtnDel","ContactList","list","selectFilteredContacts","useEffect","hendleFetchContact","map","id","telLink","href","src","avatar","alt","width","height","onClick","hendleDeleteContact","delContact","style","textAlign"],"sourceRoot":""}